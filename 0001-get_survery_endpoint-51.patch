From 66b52c04b069953e0caa3fcd59c162cde19e6956 Mon Sep 17 00:00:00 2001
From: Ignacio Manzano <imanzano@users.noreply.github.com>
Date: Wed, 29 Apr 2020 13:54:14 -0300
Subject: [PATCH] get_survery_endpoint (#51)

---
 .../server/controller/SurveyController.java   | 13 +++
 .../server/services/SurveyService.java        | 87 +++++++++++--------
 .../controller/SurveyControllerTest.java      | 37 ++++++++
 3 files changed, 99 insertions(+), 38 deletions(-)

diff --git a/src/main/java/com/privatekit/server/controller/SurveyController.java b/src/main/java/com/privatekit/server/controller/SurveyController.java
index ccfd9a9..7626e19 100644
--- a/src/main/java/com/privatekit/server/controller/SurveyController.java
+++ b/src/main/java/com/privatekit/server/controller/SurveyController.java
@@ -53,6 +53,19 @@ public class SurveyController {
         return surveyService.getSurveys(appNamespace);
     }
 
+    @GetMapping(value = "/v1.0/{app_namespace}/survey/{survey_id}")
+    @Transactional
+    public @ResponseBody
+    Survey getSurveys(@PathVariable("app_namespace") String appNamespace, @PathVariable("survey_id") Integer surveryId) {
+
+        resolveApplicationApproved(appNamespace);
+
+        final Optional<Survey> survey = surveyService.getSurvey(surveryId);
+        if (survey.isEmpty())
+            throw new ResponseStatusException(NOT_FOUND, "Survey not Found");
+        return survey.get();
+    }
+
     @PostMapping(value = "/v1.0/{app_namespace}/survey",
             consumes = {MediaType.APPLICATION_JSON_VALUE},
             produces = {MediaType.APPLICATION_JSON_VALUE})
diff --git a/src/main/java/com/privatekit/server/services/SurveyService.java b/src/main/java/com/privatekit/server/services/SurveyService.java
index f29b88b..5d0d92d 100644
--- a/src/main/java/com/privatekit/server/services/SurveyService.java
+++ b/src/main/java/com/privatekit/server/services/SurveyService.java
@@ -46,44 +46,7 @@ public class SurveyService {
 
         final Collection<Survey> all = surveyRepository.findByAppNamespace(appNamespace);
 
-        all.forEach(s -> {
-            final com.privatekit.server.controller.model.Survey survey = com.privatekit.server.controller.model.Survey.from(s);
-
-            final Collection<com.privatekit.server.entity.Question> questions = questionRepository.findBySurveyId(s.getId());
-
-            //collect questions
-            questions.forEach(q -> {
-                final Question question = Question.from(q);
-                survey.getQuestions().add(question);
-
-                final Collection<QuestionCondition> list = questionConditionRepository.findById_SurveyIdAndId_QuestionKey(q.getSurveyId(), q.getId().getQuestionKey());
-
-                question.getConditions()
-                        .addAll(list.stream()
-                                .map(i -> com.privatekit.server.controller.model.QuestionCondition.create(i.getId().getResponse(), i.getJumpToKey()))
-                                .collect(Collectors.toList()));
-
-            });
-
-            //collect options
-            final Optional<SurveyOption> surveyOption = optionRepository.findById_SurveyId(s.getId());
-            if (surveyOption.isPresent()) {
-                final SurveyOption so = surveyOption.get();
-                final Set<SurveyOptionValue> values = so.getValues();
-                final Option option = new Option();
-                option.setKey(so.getId().getOptionKey());
-
-                values.forEach(v -> option.getValues().add(OptionValue.from(v)));
-
-                survey.getOptions().add(option);
-            }
-
-            //collect screenTypes
-            final Collection<SurveyScreenType> screenTypes = surveyScreenTypeRepository.findById_SurveyId(s.getId());
-            screenTypes.forEach(st -> survey.getScreenTypes().add(st.getId().getScreenTypeKey()));
-
-            surveysList.addSurvey(survey);
-        });
+        all.forEach(s -> surveysList.addSurvey(getSurveyFrom(s)));
 
         return surveysList;
     }
@@ -168,4 +131,52 @@ public class SurveyService {
             responseRepository.save(sr);
         });
     }
+
+    public Optional<com.privatekit.server.controller.model.Survey> getSurvey(Integer surveyId) {
+
+        final Optional<Survey> surveyDb = surveyRepository.findById(surveyId);
+
+        if (surveyDb.isEmpty()) return Optional.empty();
+
+        return Optional.of(getSurveyFrom(surveyDb.get()));
+    }
+
+    private com.privatekit.server.controller.model.Survey getSurveyFrom(Survey s) {
+        final com.privatekit.server.controller.model.Survey survey = com.privatekit.server.controller.model.Survey.from(s);
+
+        final Collection<com.privatekit.server.entity.Question> questions = questionRepository.findBySurveyId(s.getId());
+
+        //collect questions
+        questions.forEach(q -> {
+            final Question question = Question.from(q);
+            survey.getQuestions().add(question);
+
+            final Collection<QuestionCondition> list = questionConditionRepository.findById_SurveyIdAndId_QuestionKey(q.getSurveyId(), q.getId().getQuestionKey());
+
+            question.getConditions()
+                    .addAll(list.stream()
+                            .map(i -> com.privatekit.server.controller.model.QuestionCondition.create(i.getId().getResponse(), i.getJumpToKey()))
+                            .collect(Collectors.toList()));
+
+        });
+
+        //collect options
+        final Optional<SurveyOption> surveyOption = optionRepository.findById_SurveyId(s.getId());
+        if (surveyOption.isPresent()) {
+            final SurveyOption so = surveyOption.get();
+            final Set<SurveyOptionValue> values = so.getValues();
+            final Option option = new Option();
+            option.setKey(so.getId().getOptionKey());
+
+            values.forEach(v -> option.getValues().add(OptionValue.from(v)));
+
+            survey.getOptions().add(option);
+        }
+
+        //collect screenTypes
+        final Collection<SurveyScreenType> screenTypes = surveyScreenTypeRepository.findById_SurveyId(s.getId());
+        screenTypes.forEach(st -> survey.getScreenTypes().add(st.getId().getScreenTypeKey()));
+
+        return survey;
+    }
 }
diff --git a/src/test/java/com/privatekit/server/controller/SurveyControllerTest.java b/src/test/java/com/privatekit/server/controller/SurveyControllerTest.java
index 1dfe75d..c33318c 100644
--- a/src/test/java/com/privatekit/server/controller/SurveyControllerTest.java
+++ b/src/test/java/com/privatekit/server/controller/SurveyControllerTest.java
@@ -184,6 +184,43 @@ public class SurveyControllerTest {
         assertEquals(Lists.list("911","Checkboox"),survey.getScreenTypes());
     }
 
+    @Test
+    void testGetSurvey() throws Exception
+    {
+        MvcResult mvcResult = mockMvc.perform(get("/v1.0/1234/survey/1"))
+                //.andDo(print())
+                .andExpect(status().isOk())
+                .andReturn();
+
+        final String contentAsString = mvcResult.getResponse().getContentAsString();
+
+        final Survey survey = fromJsonString(contentAsString, Survey.class);
+
+        assertEquals("Symptoms Checker Survey", survey.getName());
+        assertThat(survey.getId()).isNotNull();
+
+        assertEquals("Symptoms Checker Survey", survey.getDescription());
+        assertFalse(survey.getQuestions().isEmpty());
+
+        final Question question = survey.getQuestions().get(0);
+
+        assertFalse(question.getConditions().isEmpty());
+
+        assertFalse(survey.getOptions().isEmpty());
+
+        assertFalse(survey.getScreenTypes().isEmpty());
+
+        assertEquals(Lists.list("911","Checkboox"),survey.getScreenTypes());
+    }
+
+    @Test
+    void testGetSurveyNotFound() throws Exception
+    {
+        mockMvc.perform(get("/v1.0/1234/survey/100000"))
+                //.andDo(print())
+                .andExpect(status().isNotFound());
+    }
+
     @Test
     void testGetSurveysFromInvalidNamespace() throws Exception
     {
-- 
2.19.2

